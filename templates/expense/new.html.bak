<script>
alert("OLD TEMPLATE: This is the expense/new.html template");
</script>

<!-- Receipt Upload & Confirmation Area -->
<div class="receipt-upload-section mb-4">
    <h3>Upload Receipt</h3>
    <div class="receipt-drop-area">
        <input type="file" id="receiptUpload" name="receipt" accept="image/*" style="display: none;">
        <button type="button" id="receiptButton" class="btn btn-outline-secondary">
            <i class="bi bi-upload"></i> Upload Receipt
        </button>
        <div id="receipt-preview" class="receipt-preview" style="display: none;">
            <img id="receipt-image" src="" alt="Receipt Preview">
            <button type="button" id="removeReceipt" class="btn btn-sm btn-danger remove-receipt">
                <i class="bi bi-x"></i>
            </button>
        </div>
    </div>
    
    <!-- Hidden fields to store receipt data -->
    <input type="hidden" id="receipt_id" name="receipt_id">
    <input type="hidden" id="receipt_data" name="receipt_data">
    
    <!-- Receipt Items Review UI -->
    <div id="receipt-review-ui" class="mt-4" style="display: none;">
        <div class="card">
            <div class="card-header bg-light">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Review Receipt Items</h5>
                    <span class="badge bg-info" id="receipt-confidence"></span>
                </div>
            </div>
            <div class="card-body">
                <p class="text-muted">Select which items to include in your shared expense:</p>
                
                <div id="receipt-items-list" class="mb-3">
                    <!-- Receipt items will be populated here via JavaScript -->
                </div>
                
                <div class="d-flex justify-content-between mt-3">
                    <button type="button" id="cancel-receipt-items" class="btn btn-outline-secondary">
                        <i class="bi bi-x-circle"></i> Cancel
                    </button>
                    <button type="button" id="use-receipt-items" class="btn btn-primary">
                        <i class="bi bi-check2-circle"></i> Use Selected Items
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Receipt Analysis Results Section -->
    <div id="receipt-items-section" class="receipt-items-section mt-3" style="display: none;">
        <div class="card">
            <div class="card-header bg-light">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Receipt Analysis</h5>
                    <span class="badge bg-info" id="receipt-confidence"></span>
                </div>
            </div>
            <div class="card-body">
                <div id="receipt-items-container">
                    <!-- Content will be populated via JavaScript -->
                </div>
                
                <div class="receipt-confirmation mt-3 pt-3 border-top">
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" id="confirm-receipt-data">
                        <label class="form-check-label" for="confirm-receipt-data">
                            <strong>Confirm Receipt Data is Correct</strong>
                        </label>
                    </div>
                    <div class="mt-2">
                        <button type="button" id="apply-receipt-data" class="btn btn-sm btn-primary" disabled>
                            Apply to Expense
                        </button>
                        <button type="button" id="edit-receipt-data" class="btn btn-sm btn-outline-secondary ms-2">
                            Edit Data
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Debug Options (Hidden by Default) -->
    <div class="debug-options mt-3" id="debug-options" style="display: none; border: 1px dashed #ccc; padding: 10px; background: #f8f9fa;">
        <div class="form-check mb-2">
            <input type="checkbox" class="form-check-input" id="debug-mode" name="debug">
            <label class="form-check-label" for="debug-mode">Debug Mode</label>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="store-override">Force Store Name</label>
                    <input type="text" class="form-control" id="store-override" name="store_override" placeholder="e.g., Costco">
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label for="currency-override">Force Currency</label>
                    <select class="form-control" id="currency-override" name="currency">
                        <option value="">Auto Detect</option>
                        <option value="USD">USD ($)</option>
                        <option value="GBP">GBP (£)</option>
                        <option value="EUR">EUR (€)</option>
                        <option value="CAD">CAD (C$)</option>
                        <option value="AUD">AUD (A$)</option>
                        <option value="JPY">JPY (¥)</option>
                    </select>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Toggle for Debug Options -->
    <div class="mt-2">
        <button type="button" id="toggle-debug" class="btn btn-sm btn-link">Show Debug Options</button>
    </div>
</div>

<style>
    /* Receipt Review UI Styles */
    .receipt-item-row {
        border-bottom: 1px solid #eee;
        padding: 10px 0;
    }
    .receipt-item-row:last-child {
        border-bottom: none;
    }
    .receipt-item-name {
        font-weight: 500;
    }
    .receipt-item-price {
        font-weight: 500;
        color: #28a745;
    }
    .form-check-input.receipt-item-shared {
        transform: scale(1.2);
    }
    .receipt-preview {
        position: relative;
        display: inline-block;
        margin-top: 10px;
        max-width: 300px;
    }
    .receipt-preview img {
        max-width: 100%;
        border: 1px solid #ddd;
        border-radius: 4px;
    }
    .remove-receipt {
        position: absolute;
        top: 5px;
        right: 5px;
        border-radius: 50%;
        padding: 0.25rem 0.4rem;
    }
</style>

<script>
    // ... existing code ...
    
    // Receipt Upload Handling
    document.getElementById('receiptButton').addEventListener('click', function() {
        document.getElementById('receiptUpload').click();
    });
    
    document.getElementById('toggle-debug').addEventListener('click', function() {
        const debugOptions = document.getElementById('debug-options');
        const toggleButton = document.getElementById('toggle-debug');
        
        if (debugOptions.style.display === 'none') {
            debugOptions.style.display = 'block';
            toggleButton.textContent = 'Hide Debug Options';
        } else {
            debugOptions.style.display = 'none';
            toggleButton.textContent = 'Show Debug Options';
        }
    });
    
    document.getElementById('receiptUpload').addEventListener('change', function(e) {
        if (e.target.files.length > 0) {
            const file = e.target.files[0];
            const reader = new FileReader();
            
            reader.onload = function(e) {
                document.getElementById('receipt-image').src = e.target.result;
                document.getElementById('receipt-preview').style.display = 'block';
                
                // Reset receipt data in form
                document.getElementById('receipt_id').value = '';
                document.getElementById('receipt_data').value = '';
                
                // Upload the receipt for processing
                uploadReceipt(file);
            };
            
            reader.readAsDataURL(file);
        }
    });
    
    document.getElementById('removeReceipt').addEventListener('click', function() {
        document.getElementById('receipt-preview').style.display = 'none';
        document.getElementById('receipt-image').src = '';
        document.getElementById('receiptUpload').value = '';
        document.getElementById('receipt_id').value = '';
        document.getElementById('receipt_data').value = '';
        
        // Hide receipt items UI
        document.getElementById('receipt-review-ui').style.display = 'none';
        document.getElementById('receipt-items-section').style.display = 'none';
    });
    
    // Cancel receipt items selection
    document.getElementById('cancel-receipt-items').addEventListener('click', function() {
        document.getElementById('receipt-review-ui').style.display = 'none';
    });
    
    // Use selected receipt items
    document.getElementById('use-receipt-items').addEventListener('click', function() {
        // Get the receipt data
        const receiptData = JSON.parse(document.getElementById('receipt_data').value || '{}');
        
        // Get selected items
        const selectedItems = [];
        document.querySelectorAll('.receipt-item-row').forEach(row => {
            const checkbox = row.querySelector('.receipt-item-shared');
            if (checkbox && checkbox.checked) {
                const name = row.querySelector('.receipt-item-name').textContent;
                const price = parseFloat(row.querySelector('.receipt-item-price').getAttribute('data-price'));
                
                selectedItems.push({
                    name: name,
                    amount: price,
                    shared: true
                });
            }
        });
        
        // Update form with store name and date if available
        if (receiptData.store_name || receiptData.merchant_name) {
            document.getElementById('vendor').value = receiptData.store_name || receiptData.merchant_name;
        }
        
        if (receiptData.total_amount) {
            document.getElementById('total_amount').value = receiptData.total_amount;
        }
        
        // Clear existing items except first
        clearItemsExceptFirst();
        
        // Add items to form
        if (selectedItems.length > 0) {
            // Update first item with first selected item
            document.getElementById('item_name_0').value = selectedItems[0].name;
            document.getElementById('item_amount_0').value = selectedItems[0].amount;
            document.getElementById('item_shared_0').checked = true;
            
            // Add remaining items
            for (let i = 1; i < selectedItems.length; i++) {
                addItem(selectedItems[i]);
            }
        }
        
        // Hide review UI
        document.getElementById('receipt-review-ui').style.display = 'none';
        
        // Show success message
        const alertDiv = document.createElement('div');
        alertDiv.className = 'alert alert-success mt-3';
        alertDiv.textContent = 'Selected items added to expense form!';
        document.querySelector('.receipt-upload-section').appendChild(alertDiv);
        
        // Auto-remove alert after 3 seconds
        setTimeout(() => {
            alertDiv.remove();
        }, 3000);
    });
    
    // Handle confirmation checkbox
    document.getElementById('confirm-receipt-data').addEventListener('change', function() {
        document.getElementById('apply-receipt-data').disabled = !this.checked;
    });
    
    // Apply receipt data to form
    document.getElementById('apply-receipt-data').addEventListener('click', function() {
        try {
            const receiptData = JSON.parse(document.getElementById('receipt_data').value);
            
            // Apply vendor/store name
            if (receiptData.store_name || receiptData.merchant_name) {
                document.getElementById('vendor').value = receiptData.store_name || receiptData.merchant_name;
            }
            
            // Apply total amount
            if (receiptData.total_amount) {
                document.getElementById('total_amount').value = receiptData.total_amount;
            }
            
            // Clear existing items first
            clearItemsExceptFirst();
            
            // Add items from receipt
            if (receiptData.items && receiptData.items.length > 0) {
                let itemIndex = 0;
                
                receiptData.items.forEach(item => {
                    const itemName = item.description || item.name || '';
                    const itemAmount = item.amount || item.price || 0;
                    
                    if (itemIndex === 0) {
                        // Update first item (which is always present)
                        document.getElementById('item_name_0').value = itemName;
                        document.getElementById('item_amount_0').value = itemAmount;
                        document.getElementById('item_shared_0').checked = true;
                    } else {
                        // Add new item
                        addItem({
                            name: itemName,
                            amount: itemAmount,
                            shared: true
                        });
                    }
                    itemIndex++;
                });
            }
            
            // Show success message
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-success mt-3';
            alertDiv.textContent = 'Receipt data applied successfully!';
            document.querySelector('.receipt-confirmation').appendChild(alertDiv);
            
            // Auto-remove alert after 3 seconds
            setTimeout(() => {
                alertDiv.remove();
            }, 3000);
            
        } catch (error) {
            console.error('Error applying receipt data:', error);
            alert('Failed to apply receipt data: ' + error.message);
        }
    });
    
    // Edit receipt data
    document.getElementById('edit-receipt-data').addEventListener('click', function() {
        const receiptData = JSON.parse(document.getElementById('receipt_data').value || '{}');
        
        // Create edit modal using Bootstrap if available, or a simple prompt otherwise
        if (typeof bootstrap !== 'undefined' && bootstrap.Modal) {
            // Create Bootstrap modal
            const modalHtml = `
                <div class="modal fade" id="editReceiptModal" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Edit Receipt Data</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div class="mb-3">
                                    <label for="edit-store-name" class="form-label">Store Name</label>
                                    <input type="text" class="form-control" id="edit-store-name" value="${receiptData.store_name || receiptData.merchant_name || ''}">
                                </div>
                                <div class="mb-3">
                                    <label for="edit-total" class="form-label">Total Amount</label>
                                    <input type="number" step="0.01" class="form-control" id="edit-total" value="${receiptData.total_amount || ''}">
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Items</label>
                                    <div id="edit-items-container">
                                        ${(receiptData.items || []).map((item, idx) => `
                                            <div class="edit-item-row row mb-2">
                                                <div class="col-7">
                                                    <input type="text" class="form-control item-desc" value="${item.description || item.name || ''}">
                                                </div>
                                                <div class="col-4">
                                                    <input type="number" step="0.01" class="form-control item-amount" value="${item.amount || item.price || ''}">
                                                </div>
                                                <div class="col-1">
                                                    <button type="button" class="btn btn-sm btn-danger remove-item">×</button>
                                                </div>
                                            </div>
                                        `).join('')}
                                    </div>
                                    <button type="button" id="add-edit-item" class="btn btn-sm btn-outline-secondary mt-2">+ Add Item</button>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" id="save-receipt-edits" class="btn btn-primary">Save Changes</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Add modal to DOM
            const modalContainer = document.createElement('div');
            modalContainer.innerHTML = modalHtml;
            document.body.appendChild(modalContainer);
            
            // Initialize modal
            const modal = new bootstrap.Modal(document.getElementById('editReceiptModal'));
            modal.show();
            
            // Add item button handler
            document.getElementById('add-edit-item').addEventListener('click', function() {
                const itemRow = document.createElement('div');
                itemRow.className = 'edit-item-row row mb-2';
                itemRow.innerHTML = `
                    <div class="col-7">
                        <input type="text" class="form-control item-desc" value="">
                    </div>
                    <div class="col-4">
                        <input type="number" step="0.01" class="form-control item-amount" value="">
                    </div>
                    <div class="col-1">
                        <button type="button" class="btn btn-sm btn-danger remove-item">×</button>
                    </div>
                `;
                document.getElementById('edit-items-container').appendChild(itemRow);
                
                // Add remove handler to new row
                itemRow.querySelector('.remove-item').addEventListener('click', function() {
                    itemRow.remove();
                });
            });
            
            // Remove item button handlers
            document.querySelectorAll('.remove-item').forEach(button => {
                button.addEventListener('click', function() {
                    this.closest('.edit-item-row').remove();
                });
            });
            
            // Save changes handler
            document.getElementById('save-receipt-edits').addEventListener('click', function() {
                // Update receipt data
                receiptData.store_name = document.getElementById('edit-store-name').value;
                receiptData.merchant_name = document.getElementById('edit-store-name').value;
                receiptData.total_amount = parseFloat(document.getElementById('edit-total').value) || 0;
                
                // Collect items
                receiptData.items = [];
                document.querySelectorAll('.edit-item-row').forEach(row => {
                    const description = row.querySelector('.item-desc').value;
                    const amount = parseFloat(row.querySelector('.item-amount').value) || 0;
                    
                    if (description && amount > 0) {
                        receiptData.items.push({
                            description: description,
                            name: description,
                            amount: amount,
                            price: amount
                        });
                    }
                });
                
                // Update hidden field
                document.getElementById('receipt_data').value = JSON.stringify(receiptData);
                
                // Re-display receipt data
                displayReceiptItems(receiptData);
                
                // Close modal
                modal.hide();
                document.getElementById('editReceiptModal').remove();
            });
        } else {
            // Simple fallback without Bootstrap
            alert('Edit functionality requires Bootstrap. Please update manually in the form.');
        }
    });

    function clearItemsExceptFirst() {
        // Keep the first item row but clear values
        document.getElementById('item_name_0').value = '';
        document.getElementById('item_amount_0').value = '';
        document.getElementById('item_shared_0').checked = false;
        
        // Remove all other item rows
        const container = document.getElementById('items-container');
        while (container.children.length > 1) {
            container.removeChild(container.lastChild);
        }
    }
    
    function addItem(itemData = {}) {
        let itemCount = document.getElementById('items-container').children.length;
        
        // Create new item row
        const newRow = document.createElement('div');
        newRow.className = 'row mb-3 item-row';
        newRow.innerHTML = `
            <div class="col-md-6">
                <input type="text" class="form-control" id="item_name_${itemCount}" 
                       name="item_name_${itemCount}" placeholder="Item name" 
                       value="${itemData.name || ''}" required>
            </div>
            <div class="col-md-3">
                <input type="number" step="0.01" class="form-control" id="item_amount_${itemCount}" 
                       name="item_amount_${itemCount}" placeholder="Amount" 
                       value="${itemData.amount || ''}" required>
            </div>
            <div class="col-md-2">
                <div class="form-check mt-2">
                    <input type="checkbox" class="form-check-input" id="item_shared_${itemCount}" 
                           name="item_shared_${itemCount}" ${itemData.shared ? 'checked' : ''}>
                    <label class="form-check-label" for="item_shared_${itemCount}">Shared</label>
                </div>
            </div>
            <div class="col-md-1">
                <button type="button" class="btn btn-danger remove-item" onclick="removeItem(this)">
                    <i class="bi bi-trash"></i>
                </button>
            </div>
        `;
        
        document.getElementById('items-container').appendChild(newRow);
    }
    
    function removeItem(button) {
        button.closest('.item-row').remove();
        
        // Renumber remaining items
        const rows = document.querySelectorAll('.item-row');
        rows.forEach((row, index) => {
            // Skip index 0 because that's handled separately
            if (index > 0) {
                const inputs = row.querySelectorAll('input');
                inputs.forEach(input => {
                    const nameParts = input.name.split('_');
                    input.name = `${nameParts[0]}_${nameParts[1]}_${index}`;
                    input.id = `${nameParts[0]}_${nameParts[1]}_${index}`;
                });
                
                const label = row.querySelector('label');
                if (label) {
                    label.htmlFor = `item_shared_${index}`;
                }
            }
        });
    }
    
    function uploadReceipt(file) {
        const formData = new FormData();
        formData.append('receipt_image', file);
        
        // Add debug options if enabled
        if (document.getElementById('debug-mode') && document.getElementById('debug-mode').checked) {
            formData.append('debug', 'true');
            
            const storeOverride = document.getElementById('store-override') ? 
                document.getElementById('store-override').value : '';
            if (storeOverride) {
                formData.append('store_type_hint', storeOverride);
            }
            
            const currencyOverride = document.getElementById('currency-override') ?
                document.getElementById('currency-override').value : '';
            if (currencyOverride) {
                formData.append('force_currency', currencyOverride);
            }
        }
        
        // Show loading indicator
        document.getElementById('receipt-items-section').style.display = 'none';
        
        // Create and show loading indicator in review UI
        const reviewUI = document.getElementById('receipt-review-ui');
        reviewUI.style.display = 'block';
        document.getElementById('receipt-items-list').innerHTML = `
            <div class="text-center py-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Processing receipt...</p>
                <p class="text-muted small">This may take a moment for large images</p>
            </div>
        `;
        
        // Disable buttons while processing
        document.getElementById('cancel-receipt-items').disabled = true;
        document.getElementById('use-receipt-items').disabled = true;
        
        fetch('/api/parse-receipt', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            console.log('Receipt parsing response:', data);
            
            if (!data.success) {
                document.getElementById('receipt-items-list').innerHTML = `
                    <div class="alert alert-danger">
                        <strong>Error processing receipt:</strong> ${data.error || 'Unknown error'}
                    </div>
                `;
                
                // If we have partial data, still show it
                if (data.partial_data) {
                    const partialData = {
                        store_name: data.partial_data.store_name,
                        merchant_name: data.partial_data.merchant_name,
                        total_amount: data.partial_data.total_amount,
                        items: data.partial_data.items || [],
                    };
                    
                    // Store receipt data
                    document.getElementById('receipt_data').value = JSON.stringify(partialData);
                    
                    // Show the partial data for review
                    showReceiptItemsForReview(partialData);
                }
                
                // Re-enable buttons
                document.getElementById('cancel-receipt-items').disabled = false;
                document.getElementById('use-receipt-items').disabled = false;
                
                return;
            }
            
            // Store receipt data
            document.getElementById('receipt_data').value = JSON.stringify(data.parsed_receipt);
            
            // Show items for review
            showReceiptItemsForReview(data.parsed_receipt);
            
            // Re-enable buttons
            document.getElementById('cancel-receipt-items').disabled = false;
            document.getElementById('use-receipt-items').disabled = false;
        })
        .catch(error => {
            console.error('Error parsing receipt:', error);
            document.getElementById('receipt-items-list').innerHTML = `
                <div class="alert alert-danger">
                    <strong>Error processing receipt:</strong> ${error.message || 'Unknown error'}
                </div>
            `;
            
            // Re-enable buttons
            document.getElementById('cancel-receipt-items').disabled = false;
            document.getElementById('use-receipt-items').disabled = false;
        });
    }
    
    function showReceiptItemsForReview(receiptData) {
        const itemsList = document.getElementById('receipt-items-list');
        const reviewUI = document.getElementById('receipt-review-ui');
        
        // Set confidence score badge if available
        const confidenceBadge = document.getElementById('receipt-confidence');
        if (confidenceBadge && receiptData.confidence_score !== undefined) {
            const confidenceScore = receiptData.confidence_score || 0;
            let badgeClass = 'bg-danger';
            
            if (confidenceScore >= 0.7) {
                badgeClass = 'bg-success';
            } else if (confidenceScore >= 0.4) {
                badgeClass = 'bg-warning';
            }
            
            confidenceBadge.className = `badge ${badgeClass}`;
            confidenceBadge.textContent = `Confidence: ${(confidenceScore * 100).toFixed(0)}%`;
        }
        
        // Show store and total information
        let html = `
            <div class="mb-3">
                <div class="row">
                    <div class="col-md-6">
                        <strong>Store:</strong> ${receiptData.store_name || receiptData.merchant_name || 'Unknown'}
                    </div>
                    <div class="col-md-6">
                        <strong>Total:</strong> ${formatCurrency(receiptData.total_amount)}
                    </div>
                </div>
            </div>
        `;
        
        // Add items table if available
        if (receiptData.items && receiptData.items.length > 0) {
            html += `<div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th style="width: 50px;"><input type="checkbox" id="select-all-items" checked></th>
                            <th>Item</th>
                            <th style="width: 120px;" class="text-end">Price</th>
                        </tr>
                    </thead>
                    <tbody>`;
            
            receiptData.items.forEach((item, index) => {
                const itemName = item.description || item.name || 'Unknown item';
                const itemAmount = item.amount || item.price || 0;
                
                html += `
                    <tr class="receipt-item-row">
                        <td>
                            <input type="checkbox" class="form-check-input receipt-item-shared" id="item-shared-${index}" checked>
                        </td>
                        <td class="receipt-item-name">${itemName}</td>
                        <td class="receipt-item-price text-end" data-price="${itemAmount}">${formatCurrency(itemAmount)}</td>
                    </tr>
                `;
            });
            
            html += `</tbody>
                </table>
            </div>`;
        } else {
            html += `
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle me-2"></i> No items detected in receipt.
                    <p class="mb-0 mt-2">You can still enter items manually after clicking "Use Selected Items".</p>
                </div>
            `;
        }
        
        // Set the HTML content
        itemsList.innerHTML = html;
        reviewUI.style.display = 'block';
        
        // Add "select all" checkbox handler
        const selectAllCheckbox = document.getElementById('select-all-items');
        if (selectAllCheckbox) {
            selectAllCheckbox.addEventListener('change', function() {
                const isChecked = this.checked;
                document.querySelectorAll('.receipt-item-shared').forEach(checkbox => {
                    checkbox.checked = isChecked;
                });
            });
        }
    }
    
    function displayReceiptItems(receiptData) {
        const container = document.getElementById('receipt-items-container');
        const itemsSection = document.getElementById('receipt-items-section');
        
        let html = '';
        
        // Add confidence score badge
        const confidenceBadge = document.getElementById('receipt-confidence');
        if (confidenceBadge) {
            const confidenceScore = receiptData.confidence_score || 0;
            let badgeClass = 'bg-danger';
            
            if (confidenceScore >= 0.7) {
                badgeClass = 'bg-success';
            } else if (confidenceScore >= 0.4) {
                badgeClass = 'bg-warning';
            }
            
            confidenceBadge.className = `badge ${badgeClass}`;
            confidenceBadge.textContent = `Confidence: ${(confidenceScore * 100).toFixed(0)}%`;
        }
        
        // Add receipt status message if provided and not complete
        if (receiptData.processing_status && receiptData.processing_status !== 'completed') {
            html += `
                <div class="alert alert-warning">
                    <strong>Receipt processing status:</strong> ${receiptData.processing_status}
                    ${receiptData.processing_error ? `<p class="mt-2 mb-0">Error: ${receiptData.processing_error}</p>` : ''}
                </div>
            `;
        }
        
        html += `
            <div class="card mb-3">
                <div class="card-header">
                    <h6 class="mb-0">Receipt Summary</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Store:</strong> ${receiptData.store_name || receiptData.merchant_name || 'Unknown'}</p>
                            <p><strong>Date:</strong> ${receiptData.date ? formatDate(receiptData.date) : 'Unknown'}</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Subtotal:</strong> ${receiptData.subtotal_amount ? formatCurrency(receiptData.subtotal_amount, receiptData.currency_type) : 'N/A'}</p>
                            <p><strong>Tax:</strong> ${receiptData.tax_amount ? formatCurrency(receiptData.tax_amount, receiptData.currency_type) : 'N/A'}</p>
                            <p><strong>Total:</strong> ${formatCurrency(receiptData.total_amount, receiptData.currency_type)}</p>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // Add items table if items exist
        if (receiptData.items && receiptData.items.length > 0) {
            html += `
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">Receipt Items (${receiptData.items.length})</h6>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-sm table-striped m-0">
                                <thead>
                                    <tr>
                                        <th>Item</th>
                                        <th class="text-end">Amount</th>
                                    </tr>
                                </thead>
                                <tbody>
            `;
            
            receiptData.items.forEach(item => {
                const itemDesc = item.description || item.name || 'Unknown item';
                const itemAmount = item.amount || item.price || 0;
                
                html += `
                    <tr>
                        <td>${itemDesc}</td>
                        <td class="text-end">${formatCurrency(itemAmount, receiptData.currency_type)}</td>
                    </tr>
                `;
            });
            
            html += `
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            `;
        } else {
            html += `
                <div class="alert alert-info">
                    <strong>No items detected in receipt.</strong>
                    <p>You may need to add expense items manually.</p>
                </div>
            `;
        }
        
        container.innerHTML = html;
        itemsSection.style.display = 'block';
    }
    
    function formatCurrency(amount, currency = 'USD') {
        if (amount === null || amount === undefined) return 'N/A';
        
        const formatter = new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: currency || 'USD'
        });
        
        return formatter.format(amount);
    }
    
    function formatDate(dateString) {
        if (!dateString) return 'Unknown';
        
        try {
            const date = new Date(dateString);
            return date.toLocaleDateString();
        } catch (e) {
            return dateString;
        }
    }
</script> 